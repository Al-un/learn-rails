# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # >> https://hub.docker.com/r/circleci/ruby/
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          RAILS_ENV: test
          # https://circleci.com/docs/2.0/databases/
          DATABASE_TEST_URL: postgresql://root@localhost/circle_test
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/ 
      - image: circleci/postgres:9.6.5-alpine-ram

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - learnzone-rails-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - learnzone-rails-dependencies-

      - run:
          name: install dependencies
          command: bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: learnzone-rails-dependencies-{{ checksum "Gemfile.lock" }}
        
      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: bundle exec rspec
          # command: |
          #   mkdir /tmp/test-results
          #   TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            
          #   bundle exec rspec --format progress \
          #                   --format RspecJunitFormatter \
          #                   --out /tmp/test-results/rspec.xml \
          #                   --format progress \
          #                   $TEST_FILES

      # # collect reports
      # - store_test_results:
      #     path: /tmp/test-results
      # - store_artifacts:
      #     path: /tmp/test-results
      #     destination: test-results